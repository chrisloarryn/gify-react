{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","name","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","props","categories","index","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,eADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAahD,OACE,0BAAMC,SANa,SAAAC,GACnBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAK,CAACC,KAAMN,IAAZ,mBAA4BK,SAK5C,2BAAOE,KAAK,OAAOC,MAAOR,EAAYS,SAZhB,SAAAN,GACxBA,EAAEC,iBACFH,EAAcE,EAAEO,OAAOF,Y,uBCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAChC,MAAO,CAAEF,KAAIC,QAAOT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QALnC,kBAOZM,GAPY,4CAAH,sDCEPM,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAExC,OACC,yBAAKa,UAAU,8DACd,yBAAKC,IAAKd,EAAKe,IAAKN,IACpB,2BAAIA,KCHMO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACfb,mBAAS,CAAEoB,KAAM,GAAIY,SAAS,IADf,mBAClCC,EADkC,KAC3BC,EAD2B,KAYzC,OATAC,qBAAU,WACTvB,EAAQC,GAAUuB,MAAK,SAACC,GACvBH,EAAS,CACRd,KAAMiB,EACNL,SAAS,SAGT,CAACnB,IAEGoB,EDV2BK,CAAazB,GAAjCY,EAD0B,EAChCL,KAAcY,EADkB,EAClBA,QACtB,OACC,oCACC,wBAAIJ,UAAU,yDAAyDf,GACtEmB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aACbH,EAAOH,KAAI,SAACiB,GAAD,OACX,kBAAC,EAAD,eAAaC,IAAKD,EAAIhB,IAAQgB,UENtBE,EAAe,SAACC,GAAW,IAAD,EACF1C,mBAAS,CAAC,CAAEO,KAAM,eADhB,mBAC/BoC,EAD+B,KACnB5C,EADmB,KAQtC,OACC,6BACC,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACM4C,EAAWrB,KAAI,WAAWsB,GAAX,IAAGrC,EAAH,EAAGA,KAAH,OACd,kBAAC,EAAD,CAASiC,IAAKjC,EAAMM,SAAUN,UCfxCsC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.8ebd6f4d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('Hello World')\n\n  const handleInputChange = e => {\n    e.preventDefault()\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    setCategories(cats => [{name: inputValue}, ...cats])\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=9nx7gvrNeP0EOYfORzMI9ajuEZ2DhRs9&q=${encodeURI(category)}&limit=10`\n    const resp = await fetch(url)\n    const { data } = await resp.json()\n    const gifs = data.map(({ id, title, images }) => {\n        return { id, title, url: images?.downsized_medium.url }\n    })\n    return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\t// console.log(id, title, url)\n\treturn (\n\t\t<div className=\"card animate__animated animate__bounceIn animate__delay-1s\">\n\t\t\t<img src={url} alt={title} />\n\t\t\t<p>{title}</p>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { useFetchGifs } from './../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category }) => {\n\tconst { data: images, loading } = useFetchGifs(category)\n\treturn (\n\t\t<>\n\t\t\t<h3 className=\"animate__animated animate__bounceIn animate__delay-1s\">{category}</h3>\n\t\t\t{loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{images.map((img) => (\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n\tconst [state, setState] = useState({ data: [], loading: true })\n\n\tuseEffect(() => {\n\t\tgetGifs(category).then((imgs) => {\n\t\t\tsetState({\n\t\t\t\tdata: imgs,\n\t\t\t\tloading: false,\n\t\t\t})\n\t\t})\n\t}, [category])\n\n\treturn state\n}\n","import React, { useState } from 'react'\n\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n// import PropTypes from 'prop-types'\n\nexport const GifExpertApp = (props) => {\n\tconst [categories, setCategories] = useState([{ name: 'One Piece' }])\n\n\t//   const handleAdd = () => {\n\t//     // setCategories([...categories, {name: 'Ranma'}])\n\t//     setCategories((cats) => [...cats, {name: 'Ranma'}])\n\t//   }\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>GifExpertApp</h2>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\t\t\t<ol>\n        {categories.map(({ name }, index) => (\n          <GifGrid key={name} category={name}/>\n        ))}\n\t\t\t</ol>\n\t\t</div>\n\t)\n}\n\n// GifExpertApp.propTypes = {}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport { GifExpertApp } from './GifExpertApp'\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}